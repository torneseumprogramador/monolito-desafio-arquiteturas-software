const { S3Client, PutBucketPolicyCommand, GetBucketPolicyCommand } = require('@aws-sdk/client-s3');
require('dotenv').config();

// Configura√ß√£o do cliente S3
const s3Client = new S3Client({
  region: process.env.AWS_REGION,
  credentials: {
    accessKeyId: process.env.AWS_ACCESS_KEY_ID,
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
  },
});

async function configureS3Bucket() {
  try {
    console.log('üîß Configurando bucket S3 para acesso p√∫blico...\n');

    // Verificar se as vari√°veis de ambiente est√£o configuradas
    if (!process.env.AWS_S3_BUCKET) {
      console.error('‚ùå Erro: AWS_S3_BUCKET n√£o est√° configurado no .env');
      return;
    }

    const bucketName = process.env.AWS_S3_BUCKET;
    console.log(`üì¶ Bucket: ${bucketName}`);

    // 1. Configurar pol√≠tica do bucket para acesso p√∫blico
    console.log('1Ô∏è‚É£ Configurando pol√≠tica do bucket...');
    const bucketPolicy = {
      Version: '2012-10-17',
      Statement: [
        {
          Sid: 'PublicReadGetObject',
          Effect: 'Allow',
          Principal: '*',
          Action: 's3:GetObject',
          Resource: `arn:aws:s3:::${bucketName}/*`
        }
      ]
    };

    try {
      await s3Client.send(new PutBucketPolicyCommand({
        Bucket: bucketName,
        Policy: JSON.stringify(bucketPolicy)
      }));
      console.log('‚úÖ Pol√≠tica do bucket configurada com sucesso');
    } catch (error) {
      console.log('‚ö†Ô∏è  Aviso: N√£o foi poss√≠vel configurar pol√≠tica do bucket:', error.message);
      console.log('üí° Dica: Verifique se o "Block Public Access" est√° desativado no console AWS');
    }

    // 2. Verificar configura√ß√£o atual
    console.log('2Ô∏è‚É£ Verificando configura√ß√£o atual...');
    try {
      const policy = await s3Client.send(new GetBucketPolicyCommand({
        Bucket: bucketName
      }));
      console.log('‚úÖ Pol√≠tica atual do bucket:');
      console.log(JSON.parse(policy.Policy));
    } catch (error) {
      console.log('‚ö†Ô∏è  N√£o foi poss√≠vel recuperar a pol√≠tica atual:', error.message);
    }

    console.log('\nüéâ Configura√ß√£o conclu√≠da!');
    console.log('\nüìã Pr√≥ximos passos:');
    console.log('1. Verifique se o bucket n√£o tem "Block all public access" ativado');
    console.log('2. Teste o upload de uma imagem na aplica√ß√£o');
    console.log('3. Verifique se a imagem √© acess√≠vel publicamente');
    console.log('\n‚ö†Ô∏è  Nota: Este bucket n√£o suporta ACLs, ent√£o apenas a pol√≠tica de bucket ser√° configurada');

  } catch (error) {
    console.error('‚ùå Erro durante a configura√ß√£o:', error.message);
    console.log('\nüîç Poss√≠veis solu√ß√µes:');
    console.log('1. Verifique se as credenciais AWS est√£o corretas');
    console.log('2. Verifique se o bucket existe na regi√£o especificada');
    console.log('3. Verifique se o usu√°rio IAM tem permiss√µes suficientes');
    console.log('4. Desative "Block Public Access" no console AWS S3');
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  configureS3Bucket();
}

module.exports = { configureS3Bucket }; 